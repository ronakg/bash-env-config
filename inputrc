# Use the text that has already been typed as the prefix for searching
# through commands (i.e. more intelligent Up/Down behavior)
"\e[A": history-search-backward
"\eOA": history-search-backward
"\e[B": history-search-forward
"\eOB": history-search-forward

# vi mode for readline
set editing-mode vi
set show-mode-in-prompt on

#set vi-ins-mode-string \1\e[5 q\2
#set vi-cmd-mode-string \1\e[2 q\2

# The following is a little hard to understand
# a full example omiting the wrapping \1 and \2
#
# \e[     (open sequence: ESC CSI)
# 48;5;   (specifies 256 bg)
# 46      (bg color)
# m       (end)
# 1;      (bold)
# 38;5;   (specifies 256 fg)
# 21      (fg color)
# m       (end)
# COMMAND (some text to display)
# \e[     (open sequence)
# 0       (reset)
# m       (end)
# \e[     (open sequence)
# 0       (cursor type)
# q       (end)

# Configures the cmd mode display
set vi-cmd-mode-string "\1\e[0 q\2"

# Configures the ins mode display
set vi-ins-mode-string "\1\e[6 q\2"

#  filename matching and completion in a case-insensitive fashion
set completion-ignore-case on

# treat hyphens (`-') and underscores (`_') as equivalent when performing case-insensitive filename matching
set completion-map-case on

# words which have more than one possible completion cause the matches to be listed immediately
set show-all-if-ambiguous on

# words which have more than one possible completion without any possible partial completion
# cause the matches to be listed immediately instead of ringing the bell
set show-all-if-unmodified on

# match files whose names begin with a `.' (hidden files) 
set match-hidden-files off

# Immediately add a trailing slash when autocompleting symlinks to directories
set mark-symlinked-directories on

# Show all autocomplete results at once
set page-completions off

# If there are more than 100 possible completions for a word, ask to show them all
set completion-query-items 100

# Show extra file information when completing, like `ls -F` does
set visible-stats on

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
set skip-completed-text on

# Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
set input-meta on
set output-meta on
set convert-meta off

set keymap vi-insert
    "jj": vi-movement-mode

Tab: complete
$if mode=vi
    set keymap vi-command
    "#": insert-comment
    ".": "i !*\r"
    "|": "A | "
    "D": kill-line
    "C": "Da"
    "dw": kill-word
    "dd": kill-whole-line
    "db": backward-kill-word
    "cc": "ddi"
    "cw": "dwi"
    "cb": "dbi"
    "daw": "lbdW"
    "yaw": "lbyW"
    "caw": "lbcW"
    "diw": "lbdw"
    "yiw": "lbyw"
    "ciw": "lbcw"
    "da\"": "lF\"df\""
    "di\"": "lF\"lmtf\"d`t"
    "ci\"": "di\"i"
    "ca\"": "da\"i"
    "da'": "lF'df'"
    "di'": "lF'lmtf'd`t"
    "ci'": "di'i"
    "ca'": "da'i"
    "da`": "lF\`df\`"
    "di`": "lF\`lmtf\`d`t"
    "ci`": "di`i"
    "ca`": "da`i"
    "da(": "lF(df)"
    "di(": "lF(lmtf)d`t"
    "ci(": "di(i"
    "ca(": "da(i"
    "da)": "lF(df)"
    "di)": "lF(lmtf)d`t"
    "ci)": "di(i"
    "ca)": "da(i"
    "da{": "lF{df}"
    "di{": "lF{lmtf}d`t"
    "ci{": "di{i"
    "ca{": "da{i"
    "da}": "lF{df}"
    "di}": "lF{lmtf}d`t"
    "ci}": "di}i"
    "ca}": "da}i"
    "da[": "lF[df]"
    "di[": "lF[lmtf]d`t"
    "ci[": "di[i"
    "ca[": "da[i"
    "da]": "lF[df]"
    "di]": "lF[lmtf]d`t"
    "ci]": "di]i"
    "ca]": "da]i"
    "da<": "lF<df>"
    "di<": "lF<lmtf>d`t"
    "ci<": "di<i"
    "ca<": "da<i"
    "da>": "lF<df>"
    "di>": "lF<lmtf>d`t"
    "ci>": "di>i"
    "ca>": "da>i"
    "da/": "lF/df/"
    "di/": "lF/lmtf/d`t"
    "ci/": "di/i"
    "ca/": "da/i"
    "da:": "lF:df:"
    "di:": "lF:lmtf:d`t"
    "ci:": "di:i"
    "ca:": "da:i"
    "e": "exit\r"
    ?: reverse-search-history
$endif
