" Author: Ronak Gandhi <me@ronakg.com>
" Source: https://github.com/ronakg/dotfiles
"
" Keep all the sane settings in following file
source ~/.vim/sane_vimrc

let g:coc_global_extensions = ['coc-python', 'coc-java', 'coc-git', 'coc-json', 'coc-tsserver', 'coc-eslint', 'coc-xml', 'coc-sh', 'coc-pairs', 'coc-diagnostic']

let g:mapleader = "\<Space>"

nnoremap \ :nohlsearch<CR>

" Jump to start of function
nnoremap [[ ?{<CR>w99[{:nohlsearch<CR>
nnoremap ]] j0[[%/{<CR>:nohlsearch<CR>

nnoremap G :norm! Gzz<CR>

nmap <C-g>g :Gstatus<CR>gg<C-n>
nmap <C-g>d :Gdiff<CR>
nmap <C-g>b :Gblame<CR>

" Grep for word under the cursor
if executable("rg")
    set grepprg=rg\ --vimgrep\ -g\ '!tags'

    " --column: Show column number
    " --line-number: Show line number
    " --no-heading: Do not show file headings in results
    " --fixed-strings: Search term as a literal string
    " --ignore-case: Case insensitive search
    " --no-ignore: Do not respect .gitignore, etc...
    " --hidden: Search hidden files and folders
    " --follow: Follow symlinks
    " --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
    " --color: Search color options
    command! -bang -nargs=* Rg call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

elseif executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column
endif
set grepformat=%f:%l:%c:%m,%f:%l:%m

function! GetVisualSelection()
    " https://stackoverflow.com/a/6271254/777247
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return ''
    endif
    let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
    return join(lines, "\n")
endfunction

function! Search(pattern, flags)
    if strlen(a:pattern) <= 2
        let search_pattern = input("Enter search term: ")
    else
        let search_pattern = a:pattern
    endif
    execute "silent grep! " . a:flags . " \"" . search_pattern . "\""
    botright copen
    execute "normal /" . search_pattern
endfunction

" whole word, smart case
nnoremap <leader>vv :call Search(expand("<cword>"), "-w -S -F")<CR>
" whole word, ignore case
nnoremap <leader>vi :call Search(expand("<cword>"), "-w -i -F")<CR>
" any part of word, smart case
nnoremap <leader>VV :call Search(expand("<cword>"), "-S -F")<CR>
" open search
nnoremap <leader>VI :call Search(expand("<cword>"), "-i -F")<CR>

" Visual mode mappings
vnoremap <leader>vv :call Search(GetVisualSelection(), "-w -S -F")<CR>
vnoremap <leader>vi :call Search(GetVisualSelection(), "-w -i -F")<CR>
vnoremap <leader>VV :call Search(GetVisualSelection(), "-S -F")<CR>
vnoremap <leader>VI :call Search(GetVisualSelection(), "-i -F")<CR>

" Prompt for search text
nnoremap <leader>vp :call Search("", "-w -S")<CR>
nnoremap <leader>VP :call Search("", "-S")<CR>

" Easier movement in visual mode
vnoremap > >gv
vnoremap < <gv

" Don't add a newline when preview window is visible
inoremap <silent><expr> <CR> pumvisible() ? "<C-y>" : "<C-g>u<CR>"

map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$

" Backspace in normal mode switches to last buffer
nnoremap <BS> <C-o>

" Expand matching braces only when pressing Enter
" inoremap {<CR> {<CR>}<Esc>==ko

" Don't let x and c to spoil the yank register
nnoremap x "_x
nnoremap c "_c

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

function! Quit()
    let debug = 0
    if debug
        echom 'Entering Quit(), current buffer is: ' . bufname('%')
        echom 'Previous buffer is: ' . bufname('#')
    endif

    let buflisted = &buflisted
    if !buflisted
        echom 'Quitting because buffer is not listed'
        quit
        return
    endif

    " number of listed buffers
    if v:version >= 800
        let l:nbuf = len(getbufinfo({'buflisted':1}))
    else
        let l:nbuf = len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
    endif

    if debug
        echom 'Number of buffers: ' . l:nbuf
    endif

    " Just quit for this special buffers
    let l:buffer_types = ['quickfix', 'nofile', 'help', 'terminal']
    if index(l:buffer_types, &buftype) >= 0 || l:nbuf == 1
        quit
        return
    endif

    " total number of splits
    let l:nsplit = winnr('$')
    let l:cur_bufnr = bufnr('%')

    " If the bufhidden is set to delete, just jump back to
    " previous buffer, this buffer gets deleted on its own
    let bufhid = &bufhidden

    if bufhid == 'delete' || bufhid == 'wipe'
        if debug
            echom 'Quitting because bufhid is ' . bufhid
        endif

        if l:nbuf == l:nsplit
            quit
        else
            bprevious
        endif

        return
    endif

    if debug
        echom 'No of splits: ' . l:nsplit . ', Current buffer: ' . l:cur_bufnr
        echom 'Previous buffer: ' . bufnr('#')
    endif

    if l:nbuf == l:nsplit
        " delete the buffer if number of open splits is same as buffers
        bdelete
    elseif l:nbuf > 1
        " Jump to previous buffer and then delete this buffer, so that
        " we're back to where we were before
        bprevious | execute 'bdelete ' . l:cur_bufnr
    else
        " quit if this is the last buffer
        quit
    endif
endfunction

" Quicker save and quit
nnoremap <silent> e :call Quit()<CR>
nnoremap <silent> <C-e> :q<CR>
nnoremap <silent> w :update<CR>
inoremap <silent> jj <Esc>

" Paste in insert mode
inoremap <C-p> <C-r>0

" Easier to get command prompt
nnoremap ; :
vnoremap ; :

" Jump to start and end of line using the home row keys
nnoremap 0 ^
nnoremap ^ 0

nnoremap <leader>l :call NumberToggle()<CR>

" Add a heading/subheading to current line
nnoremap <leader>= yypVr=<Esc>==
nnoremap <leader>- yypVr-<Esc>==

" Go to end of yanked/pasted text
vnoremap <silent> y y`]
" }}

" Commit and push {{
function! s:CommitPush(...)
    if a:0 > 0
        execute "Gcommit -am '" . join(a:000) . "'"
    else
        :Gcommit -am "update notes"
    endif

    :Gpush
endfunction

command! -nargs=? CommitPush call s:CommitPush(<f-args>)

let g:quickr_preview_position = 'right'
let g:quickr_preview_on_cursor = 1

" quickr-cscope.vim
let g:quickr_cscope_program = "gtags-cscope"
let g:quickr_cscope_db_file = "GTAGS"

" ======================================================================================
" UpdateGlobalDB()
" Incrementally update the database generated by GNU GLOBAL
" ======================================================================================
function! UpdateGlobalDB()
    try
        silent! execute '!gtags -i &'
    catch
    endtry
endfunction

let g:quickr_cscope_autoload_db = 1
let g:quickr_cscope_use_qf_g = 1
let g:quickr_cscope_debug_mode = 0
nmap <leader>h <Plug>(quickr_cscope_global_verticle_split)

" ======================================================================================
" Strip trailing whitespaces
" ======================================================================================
function! StripTrailingWhite()
    let l:winview = winsaveview()
    silent! %s/\s\+$//
    call winrestview(l:winview)
endfunction

function! SetTerminal()
    wincmd L
    startinsert
    setlocal nonumber
    setlocal norelativenumber
    if exists(':IndentLinesDisable')
        IndentLinesDisable
    endif
endfunction


" Auto commands
" ======================================================================================

if has("autocmd")"
    " Enable spell checking

    augroup mycommands
        autocmd!
        autocmd FileType gitcommit setlocal spell
        autocmd FileType markdown setlocal spell
        autocmd FileType text setlocal spell
        autocmd FileType rst setlocal spell

        " Remember cursor position between vim sessions
        autocmd BufReadPost *
                    \ if line("'\"") > 1 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif

        " Update diff when leaving from insertmode or writing to file
        autocmd BufWritepost * if &diff | diffupdate | endif
        autocmd BufEnter,BufNew * if &diff | colorscheme onedark | endif


        " Open help in vertical split
        autocmd FileType help wincmd L

        if has('nvim')
            au BufEnter * if &buftype == 'terminal' | :call SetTerminal() | endif
        endif

    augroup END
endif

function! NumberToggle()
    if(&relativenumber == 1 && &number == 1)
        set number
        set norelativenumber
    elseif (&number == 1 && &relativenumber == 0)
        set norelativenumber
        set nonumber
    else
        set number
        set relativenumber
    endif
endfunction

if &diff
    nnoremap e :qa<CR>
    nnoremap w :wa<CR>
    nnoremap W :wa!<CR>
    set number
    set norelativenumber
    let b:coc_enabled = 0
endif

set tags=./tags;/   " ctags path, search upwards till tags file is found

let g:airline#extensions#tabline#enabled                      = 1
let g:airline#extensions#tabline#buffer_min_count             = 1
let g:airline#extensions#tabline#tab_min_count                = 1
let g:airline#extensions#tabline#buffer_idx_mode              = 1
let g:airline#extensions#tabline#buffer_nr_show               = 0
let g:airline#extensions#tabline#show_buffers                 = 1
let g:airline#extensions#branch#enabled                       = 1
let g:airline#extensions#tagbar#enabled                       = 1
let g:airline#extensions#tabline#left_sep                     = ''
let g:airline#extensions#tabline#left_alt_sep                 = '|'
let g:airline#extensions#tabline#right_sep                    = ''
let g:airline#extensions#tabline#right_alt_sep                = '|'
let g:airline_left_sep                                        = ''
let g:airline_left_alt_sep                                    = '|'
let g:airline_right_sep                                       = ''
let g:airline_right_alt_sep                                   = '|'
let g:airline_powerline_fonts                                 = 1
let g:airline#extensions#tabline#fnamemod                     = ':t'
let g:airline_theme                                           = 'ayu_mirage'
let g:airline_section_c                                       = '%{fnamemodify(expand("%"), ":~:.")}'
let g:airline_section_x                                       = '%{fnamemodify(getcwd(), ":t")}'
let g:airline_section_y                                       = airline#section#create(['filetype'])
let g:airline_section_z                                       = '%{coc#status()}'
" Easier tab/buffer switching
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

nnoremap <silent> <leader>p :FZF --no-reverse<CR>
nnoremap <silent> <leader>b :Tags<CR>
nnoremap b :Buffers<CR>

" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1
let g:tmuxline_powerline_separators = 1
let g:airline#extensions#tmuxline#enabled                     = 0
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W'],
      \'y'    : '#(date "+%Y-%b-%d %H:%M")',
      \'z'    : '#H',
      \'options' : {'status-justify' : 'left'}}
let g:tmuxline_separators = {
    \ 'left' : '',
    \ 'left_alt': '|',
    \ 'right' : '',
    \ 'right_alt' : '|',
    \ 'space' : ' '}

" Change cursor shape based on mode.
if has('nvim')
    "set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
else
    set t_ut=
    set gcr=a:blinkon0
    if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif
endif

let g:startify_list_order = [['Most recently used files in current directory:'], 'dir',
            \                ['Bookmarks:'], 'bookmarks']
let g:startify_change_to_dir = 0
let g:startify_files_number = 10
let g:startify_bookmarks = [ {'a': '~/.vim/vimrc'}, {'b': '~/.vim/vim-plug.vim'}, {'c': '~/.vim/sane_vimrc'} ]

if filereadable(".vim.custom")
    so .vim.custom
endif

function! ZoomToggle()
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
nnoremap <silent> <C-a> :call ZoomToggle()<CR>

let g:indentLine_setColors = 1
let g:indentLine_leadingSpaceChar = '·'
let g:indentLine_char = '│'

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

let g:clever_f_ignore_case = 1
let g:clever_f_smart_case = 1
let g:clever_f_fix_key_direction = 1

let g:NERDCreateDefaultMappings = 0
let g:NERDRemoveExtraSpaces = 0
nmap gc <plug>NERDCommenterToggle
vmap gc <plug>NERDCommenterSexy
map gx <plug>NERDCommenterToggle

command! -nargs=+ Silent
            \ | execute ':silent !'.<q-args>
            \ | execute ':redraw!'

nnoremap <C-b> :vsplit term://bash<CR>

" Window navigation function
" Make ctrl-h/j/k/l move between windows and auto-insert in terminals
func! s:mapMoveToWindowInDirection(direction)
func! s:maybeInsertMode(direction)
        stopinsert
        execute "wincmd" a:direction

        if &buftype == 'terminal'
        startinsert!
        endif
endfunc

execute "tnoremap" "<silent>" "<C-" . a:direction . ">"
                \ "<C-\\><C-n>"
                \ ":call <SID>maybeInsertMode(\"" . a:direction . "\")<CR>"
execute "nnoremap" "<silent>" "<C-" . a:direction . ">"
                \ ":call <SID>maybeInsertMode(\"" . a:direction . "\")<CR>"
endfunc

for dir in ["h", "j", "l", "k"]
call s:mapMoveToWindowInDirection(dir)
endfor
tnoremap <esc><esc> <C-\><C-n>

let g:tmux_navigator_disable_when_zoomed = 1

au FileType python setlocal formatprg=autopep8\ -

nnoremap <C-d> :call ZoomToggle()<CR>:Gdiff<CR>

map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)

nnoremap gf <C-w>f<C-w>L

" if hidden is not set, TextEdit might fail.
set hidden

" Some server have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

nmap gs <Plug>(coc-git-chunkinfo)

let g:python_highlight_all = 1
